{%- style -%}
  .promo-carousel-{{ section.id }} {
    --title-size: {{ section.settings.title_size }}rem;
    --title-weight: {{ section.settings.title_weight }};
    --card-width-mobile: {% if section.settings.full_width_mobile %}100vw{% else %}{{ section.settings.card_width_mobile }}px{% endif %};
    --card-width-desktop: {{ section.settings.card_width_desktop }}px;
    --card-gap: {{ section.settings.card_gap }}px;
    --arrow-size: {{ section.settings.arrow_size }}px;
    --arrow-color: {{ section.settings.arrow_color }};
    --arrow-offset: {{ section.settings.arrow_offset }}px;
    --card-radius: {{ section.settings.card_radius }}px;
    --title-color: {{ section.settings.title_color }};
    --subtitle-color: {{ section.settings.subtitle_color }};
    --title-font-size: {{ section.settings.title_font_size }}px;
    --subtitle-font-size: {{ section.settings.subtitle_font_size }}px;
    --text-position: {{ section.settings.text_position }};
  }
{%- endstyle -%}

<div class="page-width">
  <section
    class="promo-carousel-{{ section.id }} relative"
    x-data="
      {
        currentIndex: 0,
        itemCount: {{ section.blocks.size }},
        cardWidth: 0,
        gap: 0,
        containerWidth: 0,
        showArrows: false,
        isDragging: false,
        startX: 0,
        currentX: 0,
        deltaX: 0,

        init() {
          this.calculateSizes();
          window.addEventListener('resize', () => this.calculateSizes());
        },

        calculateSizes() {
          const slider = this.$refs.slider;
          if (!slider) return;

          const card = slider.querySelector('.promo-card');
          if (!card) return;

          this.cardWidth = card.offsetWidth;
          this.gap = parseInt(window.getComputedStyle(slider).gap) || 0;
          this.containerWidth = this.$root.offsetWidth;

          const visibleCards = Math.floor(this.containerWidth / (this.cardWidth + this.gap));
          const totalCards = this.itemCount;

          this.showArrows = totalCards > visibleCards;

          const maxIndex = Math.max(0, totalCards - visibleCards);
          if (this.currentIndex > maxIndex) this.currentIndex = maxIndex;
        },

        prev() {
          this.currentIndex = Math.max(this.currentIndex - 1, 0);
        },

        next() {
          const visibleCards = Math.floor(this.containerWidth / (this.cardWidth + this.gap));
          const maxIndex = Math.max(0, this.itemCount - visibleCards);
          this.currentIndex = Math.min(this.currentIndex + 1, maxIndex);
        },

        goTo(index) {
          this.currentIndex = index;
        },

        get transform() {
          const totalContentWidth = (this.cardWidth + this.gap) * this.itemCount - this.gap;
          const maxScrollX = totalContentWidth - this.containerWidth;
          const idealOffset = this.currentIndex * (this.cardWidth + this.gap);
          const clampedOffset = Math.min(idealOffset, maxScrollX);
          return `translateX(-${clampedOffset}px)`;
        },

        onMouseDown(event) {
          this.isDragging = true;
          this.startX = event.clientX;
          this.currentX = this.startX;
        },

        onMouseMove(event) {
          if (!this.isDragging) return;
          this.currentX = event.clientX;
          this.deltaX = this.currentX - this.startX;
        },

        onMouseUp() {
          if (!this.isDragging) return;
          this.isDragging = false;

          const offset = this.currentIndex * (this.cardWidth + this.gap) - this.deltaX;
          const newIndex = Math.round(offset / (this.cardWidth + this.gap));
          const visibleCards = Math.floor(this.containerWidth / (this.cardWidth + this.gap));
          const maxIndex = Math.max(0, this.itemCount - visibleCards);

          this.currentIndex = Math.max(0, Math.min(newIndex, maxIndex));
          this.deltaX = 0;
        },
        onTouchStart(event) {
          this.isDragging = true;
          this.startX = event.touches[0].clientX;
          this.currentX = this.startX;
        },

        onTouchMove(event) {
          if (!this.isDragging) return;
          this.currentX = event.touches[0].clientX;
          this.deltaX = this.currentX - this.startX;
        },

        onTouchEnd() {
          if (!this.isDragging) return;
          this.isDragging = false;

          const offset = this.currentIndex * (this.cardWidth + this.gap) - this.deltaX;
          const newIndex = Math.round(offset / (this.cardWidth + this.gap));
          const visibleCards = Math.floor(this.containerWidth / (this.cardWidth + this.gap));
          const maxIndex = Math.max(0, this.itemCount - visibleCards);

          this.currentIndex = Math.max(0, Math.min(newIndex, maxIndex));
          this.deltaX = 0;
        },


        get dragTransform() {
          const baseOffset = this.currentIndex * (this.cardWidth + this.gap) - this.deltaX;
          const totalContentWidth = (this.cardWidth + this.gap) * this.itemCount - this.gap;
          const maxScrollX = totalContentWidth - this.containerWidth;
          const offset = Math.min(Math.max(baseOffset, 0), maxScrollX);
          console.log(offset)
          return `translateX(-${offset}px)`;
        }
      }
    "
  >
    {%- assign title_alignment = 'justify-'
      | append: section.settings.title_position
    -%}
    <div class="container mx-auto px-4">
      {%- if section.settings.title != blank -%}
        <div class="flex {{ title_alignment }} mb-6">
          <span class="text-[var(--title-size)] font-[var(--title-weight)]">
            {{ section.settings.title }}
          </span>
        </div>
      {%- endif -%}
    </div>

    <div class="relative container" x-ref="container">
      <div class="overflow-hidden">
        <div
          class="slider-track select-none flex transition-transform duration-300 ease-in-out gap-[var(--card-gap)]"
          @mousedown="onMouseDown"
          @mousemove="onMouseMove"
          @mouseup="onMouseUp"
          @mouseleave="onMouseUp"
          @touchstart="onTouchStart"
          @touchmove="onTouchMove"
          @touchend="onTouchEnd"
          @mousedown="onMouseDown"
          @mousemove="onMouseMove"
          @mouseup="onMouseUp"
          @mouseleave="onMouseUp"
          x-ref="slider"
          :style="`transform: ${dragTransform}`"
        >
          {%- for block in section.blocks -%}
            <div
              style="border-radius: var(--card-radius);"
              class="promo-card flex-shrink-0 overflow-hidden  w-[var(--card-width-mobile)] md:w-[var(--card-width-desktop)]"
              {{ block.shopify_attributes }}
            >
              <a
                href="{{ block.settings.link | default: '#' }}"
                draggable="false"
                class="block h-full w-full bg-gray-100 rounded-lg overflow-hidden relative"
              >
                {%- if block.settings.image != blank -%}
                  {{
                    block.settings.image
                    | image_url: width: 800
                    | image_tag:
                      loading: 'lazy',
                      draggable: false,
                      class: 'w-full h-full object-cover'
                  }}
                {%- else -%}
                  <div class="w-full h-full flex items-center justify-center bg-gray-200">
                    {{
                      'product-1'
                      | placeholder_svg_tag: 'w-1/2 h-1/2 text-gray-400'
                    }}
                  </div>
                {%- endif -%}

                <div
                  class="absolute p-4 w-full text-white"
                  style="
                    bottom: {% if section.settings.text_position == 'bottom' %}0{% else %}auto{% endif %};
                    top: {% if section.settings.text_position == 'top' %}0{% else %}auto{% endif %};
                    background: {% if section.settings.text_position == 'middle' %}rgba(0,0,0,0.7){% else %}transparent{% endif %};
                    {% if section.settings.text_position == 'middle' %}height: 100%; display: flex; flex-direction: column; justify-content: center;{% endif %}
                  "
                >
                  {%- if block.settings.title != blank -%}
                    <h3
                      class="font-bold"
                      style="
                        color: var(--title-color);
                        font-size: var(--title-font-size);
                        {% if section.settings.text_position == 'middle' %}margin-bottom: 0.8rem;{% endif %}
                      "
                    >
                      {{ block.settings.title }}
                    </h3>
                  {%- endif -%}
                  {%- if block.settings.subtitle != blank -%}
                    <p
                      style="
                        color: var(--subtitle-color);
                        font-size: var(--subtitle-font-size);
                      "
                    >
                      {{ block.settings.subtitle }}
                    </p>
                  {%- endif -%}
                </div>
              </a>
            </div>
          {%- endfor -%}
        </div>
      </div>

      {%- if section.blocks.size > 1 -%}
        <button
          class="slider-prev absolute top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md transition-all"
          style="left: var(--arrow-offset); width: var(--arrow-size); height: var(--arrow-size);"
          :class="{ 'opacity-50 cursor-default': currentIndex === 0, 'hidden': !showArrows }"
          @click="prev()"
          :disabled="currentIndex === 0"
          aria-label="Previous slide"
        >
          <svg
            data-slot="icon"
            fill="none"
            stroke-width="1.5"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
            class="w-full h-full rotate-180"
          >
            <path stroke-linecap="round" stroke-linejoin="round" class="stroke-[var(--arrow-color)]" stroke-width="2" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
          </svg>
        </button>

        <button
          class="slider-next absolute top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white p-2 rounded-full shadow-md transition-all"
          style="right: var(--arrow-offset); width: var(--arrow-size); height: var(--arrow-size);"
          :class="{ 'opacity-50 cursor-default': currentIndex >= itemCount - 1, 'hidden': !showArrows }"
          @click="next()"
          :disabled="currentIndex >= itemCount - 1"
          aria-label="Next slide"
        >
          <svg
            data-slot="icon"
            fill="none"
            stroke-width="1.5"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
            class="w-full h-full"
          >
            <path stroke-linecap="round" stroke-linejoin="round" class="stroke-[var(--arrow-color)]" stroke-width="2" d="m8.25 4.5 7.5 7.5-7.5 7.5"></path>
          </svg>
        </button>
      {%- endif -%}
    </div>
  </section>
</div>

{% schema %}
{
  "name": "Carousel",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section title",
      "default": "Promotions this week!"
    },
    {
      "type": "range",
      "id": "title_size",
      "min": 1,
      "max": 4,
      "step": 0.5,
      "default": 1,
      "label": "Title font size (rem)"
    },
    {
      "type": "select",
      "id": "title_weight",
      "label": "Title font weight",
      "options": [
        { "value": "300", "label": "Light" },
        { "value": "400", "label": "Normal" },
        { "value": "500", "label": "Medium" },
        { "value": "600", "label": "Semibold" },
        { "value": "700", "label": "Bold" }
      ],
      "default": "600"
    },
    {
      "type": "select",
      "id": "title_position",
      "label": "Title position",
      "options": [
        { "value": "start", "label": "Left" },
        { "value": "center", "label": "Center" },
        { "value": "end", "label": "Right" }
      ],
      "default": "start"
    },
    {
      "type": "header",
      "content": "Card Settings"
    },
    {
      "type": "checkbox",
      "id": "full_width_mobile",
      "label": "Full width cards on mobile",
      "default": false
    },
    {
      "type": "range",
      "id": "card_width_mobile",
      "min": 200,
      "max": 400,
      "step": 10,
      "default": 280,
      "label": "Card width - mobile (px)",
      "info": "Only applies when full width is disabled"
    },
    {
      "type": "range",
      "id": "card_width_desktop",
      "min": 200,
      "max": 500,
      "step": 10,
      "default": 320,
      "label": "Card width - desktop (px)"
    },
    {
      "type": "range",
      "id": "card_gap",
      "min": 0,
      "max": 40,
      "step": 2,
      "default": 16,
      "label": "Space between cards (px)"
    },
    {
      "type": "header",
      "content": "Text Content"
    },
    {
      "type": "select",
      "id": "text_position",
      "label": "Text position",
      "options": [
        { "value": "bottom", "label": "Bottom" },
        { "value": "middle", "label": "Middle" },
        { "value": "top", "label": "Top" }
      ],
      "default": "bottom"
    },
    {
      "type": "range",
      "id": "title_font_size",
      "min": 14,
      "max": 32,
      "step": 1,
      "default": 20,
      "label": "Title font size (px)"
    },
    {
      "type": "range",
      "id": "subtitle_font_size",
      "min": 12,
      "max": 24,
      "step": 1,
      "default": 16,
      "label": "Subtitle font size (px)"
    },
    {
      "type": "color",
      "id": "title_color",
      "label": "Title color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "subtitle_color",
      "label": "Subtitle color",
      "default": "#ffffff"
    },
    {
      "type": "header",
      "content": "Arrow Settings"
    },
    {
      "type": "range",
      "id": "card_radius",
      "min": 0,
      "max": 40,
      "step": 2,
      "default": 12,
      "label": "Card border radius (px)"
    },

    {
      "type": "range",
      "id": "arrow_size",
      "min": 16,
      "max": 48,
      "step": 2,
      "default": 32,
      "label": "Arrow size (px)"
    },
    {
      "type": "color",
      "id": "arrow_color",
      "label": "Arrow color",
      "default": "#000000"
    },
    {
      "type": "range",
      "id": "arrow_offset",
      "min": -40,
      "max": 40,
      "step": 2,
      "default": -16,
      "label": "Arrow position offset (px)",
      "info": "Negative values move arrows outside the slider"
    }
  ],
  "blocks": [
    {
      "type": "promo",
      "name": "Promotion Card",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Up to 50% off"
        },
        {
          "type": "text",
          "id": "subtitle",
          "label": "Subtitle",
          "default": "Category Name"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Promotions Carousel",
      "blocks": [
        {
          "type": "promo",
          "settings": {
            "title": "Up to 45% off",
            "subtitle": "Beauty & Personal Care"
          }
        },
        {
          "type": "promo",
          "settings": {
            "title": "Up to 50% off",
            "subtitle": "Small Appliances"
          }
        },
        {
          "type": "promo",
          "settings": {
            "title": "Up to 40% off",
            "subtitle": "Home Appliances"
          }
        }
      ]
    }
  ]
}
{% endschema %}
