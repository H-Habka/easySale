{{ 'component-cart.css' | asset_url | stylesheet_tag }}
{{ 'component-cart-items.css' | asset_url | stylesheet_tag }}
{{ 'component-totals.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}
{{ 'component-discounts.css' | asset_url | stylesheet_tag }}
{{ 'quantity-popover.css' | asset_url | stylesheet_tag }}

{%- unless settings.cart_type == 'drawer' -%}
  <script src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
{%- endunless -%}
<script src="{{ 'quantity-popover.js' | asset_url }}" defer="defer"></script>

<cart-items class="gradient color-{{ section.settings.color_scheme }} isolate{% if cart == empty %} is-empty{% else %} section-{{ section.id }}-padding{% endif %}">
  <div class="page-width">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-10">
      <div class="flex items-center gap-6 sm:flex-col justify-between">
        <h1 class="text-2.4 md:text-2.8 !mb-1 !mt-1 font-semibold text-[#01635D] tracking-tight">
          {{ 'sections.cart.title' | t }}
        </h1>
        <button
          id="share-cart-btn"
          type="button"
          class="inline-flex sm:mt-[10px] items-center gap-2 px-3 py-1.5 text-1.4 font-medium rounded-lg border border-[#01A89E] text-[#01A89E] hover:bg-[#01A89E] hover:text-white transition-colors duration-200 relative"
        >
          <svg
            width="1.5rem"
            height="1.5rem"
            fill="none"
            viewBox="0 0 24 24"
            class="share-cart-icon"
          >
            <path d="M16 12l5-4.5m0 0L16 3m5 4.5H10.8a5.8 5.8 0 000 11.6H12"
                  stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
          <span class="share-cart-text">
            {{- 'extra_translations.share_cart' | t -}}
          </span>
          <!-- Spinner (hidden by default) -->
          <svg
            id="share-cart-spinner"
            class="hidden animate-spin ms-1"
            width="22"
            height="22"
            viewBox="0 0 22 22"
            fill="none"
          >
            <circle cx="11" cy="11" r="10" stroke="#01A89E" stroke-width="3" stroke-linecap="round" stroke-dasharray="60" stroke-dashoffset="20"/>
          </svg>
        </button>
      </div>
      <a
        id="continue-shopping-1"
        href="{{ routes.all_products_collection_url }}"
        class="inline-flex items-center text-1.4 font-medium text-[#01A89E] hover:text-[#01635D] transition-colors duration-200 group"
      >
        {{ 'general.continue_shopping' | t }}
        <span class="rtl:rotate-180 ms-2 inline-block transform group-hover:translate-x-1 rtl:group-hover:-translate-x-1 transition-transform duration-200">
          <svg
            width="1.4rem"
            height="1.4rem"
            viewBox="0 0 20 20"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M7.5 15L12.5 10L7.5 5" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </span>
      </a>
    </div>

    {% if cart.empty? %}
      <div class="text-center py-12 px-6">
        <h1 class="text-2 font-medium text-gray-900 mb-6">
          {{ 'sections.cart.empty' | t }}
        </h1>
        <a
          id="continue-shopping-2"
          href="{{ routes.all_products_collection_url }}"
          class="inline-flex items-center justify-center px-5 py-2.5 border border-transparent text-md font-medium rounded-[0.4rem] text-white bg-gradient-to-r from-[#01756E] via-[#01A89E] to-[#00CFC8] hover:from-[#01635D] hover:via-[#018F87] hover:to-[#00B8B2] shadow-md transition-all duration-150 ease-out hover:ease-in hover:shadow-lg hover:-translate-y-0.5 active:translate-y-0.5 focus:outline-none focus:ring-2 focus:ring-offset-1 focus:ring-[#01A89E]"
        >
          {{ 'general.continue_shopping' | t }}
        </a>
      </div>
    {% else %}
      <div class="relative min-h-[calc(100vh-200px)]">
        <form
          action="{{ routes.cart_url }}"
          class="cart__contents critical-hidden flex flex-col "
          method="post"
          id="cart"
          style="min-height: 100%;"
        >
          <div
            class="cart__items"
            id="main-cart-items"
            data-id="{{ section.id }}"
          >
            <div class="js-contents">
              {%- assign product_types = cart.items
                | map: 'product'
                | map: 'type'
                | uniq
              -%}
              {%- for type in product_types -%}
                {%- assign type_total = 0 -%}
                {%- for item in cart.items -%}
                  {%- if item.product.type == type -%}
                    {%- assign type_total = type_total
                      | plus: item.final_line_price
                    -%}
                  {%- endif -%}
                {%- endfor -%}
                <div
                  data-product-type="{{ type | escape }}"
                  class="mb-12 border border-gray-200 rounded-lg overflow-hidden"
                >
                  <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                    <div class="flex items-center gap-4">
                      <div class="flex flex-col md:flex-row md:items-center md:gap-4">
                        <p class="text-[1.5rem] md:text-[1.7rem] font-semibold text-[#01756E]">
                          {%- if type == blank -%}
                            {{ 'extra_translations.others' | t }}
                          {%- else -%}
                            {{ type }}
                          {%- endif -%}
                        </p>
                        <span class="text-[1.2rem] md:text-[1.5rem]"
                          >({{ type_total | money_with_currency }})
                        </span>
                      </div>
                      <button
                        class="group ms-auto text-red-600 hover:text-red-800 font-medium relative flex items-center gap-4 disabled:opacity-50 disabled:cursor-not-allowed"
                        data-remove-type="{{ type | escape }}"
                        type="button"
                        onclick="handleDeleteTypeGroup(this)"
                      >
                        <div
                          class="group-disabled:!block hidden customLoader text-transparent"
                        >
                          s
                        </div>
                        <!-- Content -->
                        <div class="group-disabled:hidden flex items-center gap-4">
                          <div class="w-8">
                            {% render 'icon-remove' %}
                          </div>
                          <span class="whitespace-nowrap">
                            {{- 'extra_translations.remove_all' | t -}}
                          </span>
                        </div>
                      </button>
                    </div>
                    {%- assign matched_rule = null -%}
                    {%- for block in section.blocks -%}
                      {%- if block.type == 'shipping_rule'
                        and block.settings.product_type == type
                      -%}
                        {%- assign matched_rule = block -%}
                      {%- endif -%}
                    {%- endfor -%}
                    {%- if matched_rule != null -%}
                      {%- assign rule_min = matched_rule.settings.min_order_amount -%}
                      <div
                        class="shipping-checkpoint absolute pointer-events-none opacity-0"
                        data-type="{{ type | escape }}"
                        data-min="{{ rule_min }}"
                        data-total="{{ type_total | divided_by: 100 }}"
                      ></div>
                      <div
                        class="mt-2 p-4 pb-0"
                      >
                        <div
                          x-data="
                            {
                              freeShippingLimit: {{ matched_rule.settings.free_shipping_limit | default: 50 }},
                              minOrderAmount: {{ matched_rule.settings.min_order_amount | default: 0 }},
                              typeTotal: {{ type_total | divided_by: 100 | default: 0 }},
                              minOrderAmountIconPosition() {
                                return `${(this.minOrderAmount / this.freeShippingLimit) * 100}`;
                              },
                              progressWidth() {
                                let percentage = (this.typeTotal / this.freeShippingLimit) * 100;
                                return `${Math.min(Math.max(percentage, 0), 100)}%`;
                              },
                              hasReached(position) {
                                let progress = (this.typeTotal / this.freeShippingLimit) * 100;
                                return progress >= position;
                              }
                            }
                          "
                          class="relative w-[95%] md:w-full mx-auto bg-gray-300 rounded-full shadow-md dark:bg-gray-800 mb-[70px]"
                        >
                          <!-- Progress Bar -->
                          <div
                            class="bg-blue-500 text-blue-100 text-center text-[6px] font-semibold py-1 leading-none rounded-full shadow-lg transition-all duration-700 ease-in-out buttonLoading text-transparent"
                            x-bind:style="{ width: progressWidth() }"
                          >
                            <span class="text-transparent">s</span>
                          </div>
                          <!-- Icon at the Start -->
                          <div
                            class="absolute top-1/2 start-0 -translate-y-1/2 -translate-x-1/2  rtl:translate-x-1/2 rounded-full p-2.5 border border-blue-700 shadow-md bg-blue-500 buttonLoading text-white"
                          >
                            <svg
                              data-slot="icon"
                              fill="none"
                              stroke-width="1.5"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                              xmlns="http://www.w3.org/2000/svg"
                              aria-hidden="true"
                              class="w-7 h-7 rtl:rotate-180"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="m5.25 4.5 7.5 7.5-7.5 7.5m6-15 7.5 7.5-7.5 7.5"
                              ></path>
                            </svg>
                            <p
                              class="absolute top-full mt-2 start-0 text-gray-600 z-[10] text-lg"
                            >
                              {{- 'extra_translations.start' | t -}}
                            </p>
                          </div>
                          <!-- Icon in the Middle -->
                          <div
                            x-bind:hidden="minOrderAmount == 0"
                            x-bind:style="{ inset-inline-start:`${minOrderAmountIconPosition()}%` }"
                            x-bind:class="hasReached(minOrderAmountIconPosition()) ? 'bg-blue-500 buttonLoading text-white' : 'text-blue-500 bg-white'"
                            class="absolute top-1/2 -translate-y-1/2 rounded-full p-2.5 border border-blue-700 shadow-md"
                          >
                            <svg
                              data-slot="icon"
                              fill="none"
                              stroke-width="1.5"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                              xmlns="http://www.w3.org/2000/svg"
                              aria-hidden="true"
                              class="w-7 h-7"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437M7.5 14.25a3 3 0 0 0-3 3h15.75m-12.75-3h11.218c1.121-2.3 2.1-4.684 2.924-7.138a60.114 60.114 0 0 0-16.536-1.84M7.5 14.25 5.106 5.272M6 20.25a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Zm12.75 0a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0Z"
                              ></path>
                            </svg>
                            <!-- Check Icon -->
                            <div
                              class="absolute top-[-8px] end-[-6px]"
                              x-bind:class="hasReached(minOrderAmountIconPosition()) ? 'text-green-500' : 'hidden'"
                            >
                              <svg
                                data-slot="icon"
                                fill="none"
                                stroke-width="1.5"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                class="w-5 h-5 stroke-[6px]"
                              >
                                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
                              </svg>
                            </div>
                            <div
                              class="absolute top-full start-1/2 -translate-x-1/2  rtl:translate-x-1/2 mt-2 text-gray-600 z-[10] text-lg flex flex-col text-center gap-0.5"
                            >
                              <p class="whitespace-nowrap">
                                {{- 'extra_translations.min_value' | t -}}
                              </p>
                              <p
                                class="font-semibold whitespace-nowrap"
                                x-text="formatNumbers(minOrderAmount)"
                              ></p>
                            </div>
                          </div>
                          <!-- Icon at the End -->
                          <div
                            x-bind:class="hasReached(100) ? 'bg-blue-500 buttonLoading text-white' : 'text-blue-500 bg-white'"
                            class="absolute top-1/2 end-0 -translate-y-1/2 translate-x-1/2 rtl:-translate-x-1/2  rounded-full p-2.5 border border-blue-700 shadow-md"
                          >
                            <div
                              class="absolute top-[-8px] end-[-6px]"
                              x-bind:class="hasReached(100) ? 'text-green-500' : 'hidden'"
                            >
                              <svg
                                data-slot="icon"
                                fill="none"
                                stroke-width="1.5"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                                xmlns="http://www.w3.org/2000/svg"
                                aria-hidden="true"
                                class="w-5 h-5 stroke-[6px]"
                              >
                                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5"></path>
                              </svg>
                            </div>
                            <svg
                              data-slot="icon"
                              fill="none"
                              stroke-width="1.5"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                              xmlns="http://www.w3.org/2000/svg"
                              aria-hidden="true"
                              class="w-7 h-7"
                            >
                              <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                d="M8.25 18.75a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h6m-9 0H3.375a1.125 1.125 0 0 1-1.125-1.125V14.25m17.25 4.5a1.5 1.5 0 0 1-3 0m3 0a1.5 1.5 0 0 0-3 0m3 0h1.125c.621 0 1.129-.504 1.09-1.124a17.902 17.902 0 0 0-3.213-9.193 2.056 2.056 0 0 0-1.58-.86H14.25M16.5 18.75h-2.25m0-11.177v-.958c0-.568-.422-1.048-.987-1.106a48.554 48.554 0 0 0-10.026 0 1.106 1.106 0 0 0-.987 1.106v7.635m12-6.677v6.677m0 4.5v-4.5m0 0h-12"
                              ></path>
                            </svg>
                            <div
                              class="absolute end-0 top-full mt-2 text-gray-600 z-[10] text-lg flex flex-col text-center gap-0.5 "
                            >
                              <p class="whitespace-nowrap">
                                {{- 'extra_translations.free_delivery' | t -}}
                              </p>
                              <p
                                class="font-semibold whitespace-nowrap"
                                x-text="formatNumbers(freeShippingLimit)"
                              ></p>
                            </div>
                          </div>
                        </div>
                      </div>
                    {%- endif -%}
                  </div>
                  <table class="w-full">
                    <thead class="border-b border-gray-200">
                      <tr>
                        <th
                          class="text-start py-4 px-6 font-medium text-gray-700"
                          colspan="1"
                        >
                          {{- 'extra_translations.product' | t -}}
                        </th>
                        <th
                          class="text-start py-4 px-6 font-medium text-gray-700 small-hide"
                          colspan="1"
                        >
                          {{- 'extra_translations.quantity' | t -}}
                        </th>
                        <th
                          class="text-end py-4 px-6 font-medium text-gray-700"
                          colspan="1"
                        >
                          {{- 'extra_translations.total' | t -}}
                        </th>
                      </tr>
                    </thead>
                    <tbody>
                      {%- for item in cart.items -%}
                        {%- if item.product.type == type -%}
                          <tr
                            class="border-b border-gray-100 hover:bg-gray-50 transition-colors duration-150"
                            id="CartItem-{{ item.index | plus: 1 }}"
                          >
                            <td class="py-4 px-6">
                              <div class="flex gap-4">
                                <div>
                                  {% if item.image %}
                                    <div class="w-40 h-40 rounded overflow-hidden border border-gray-100">
                                      <img
                                        src="{{ item.image | image_url: width: 300 }}"
                                        class="w-full h-full object-cover"
                                        alt="{{ item.image.alt | escape }}"
                                        loading="lazy"
                                        width="150"
                                        height="{{ 150 | divided_by: item.image.aspect_ratio | ceil }}"
                                      >
                                    </div>
                                  {% endif %}
                                </div>
                                <div>
                                  {%- if settings.show_vendor -%}
                                    <p class="text-gray-500 mb-1">
                                      {{ item.product.vendor }}
                                    </p>
                                  {%- endif -%}
                                  <a
                                    href="{{ item.url }}"
                                    class="text-gray-900 hover:text-[#01756E] transition-colors duration-150 font-medium"
                                  >
                                    {{- item.product.title | escape -}}
                                  </a>
                                  {%- if item.original_price != item.final_price
                                  -%}
                                    <div class="mt-1">
                                      <s class="text-gray-500">
                                        {{- item.original_price | money -}}
                                      </s>
                                      <span class="ms-2 font-medium text-[#01756E]">
                                        {{- item.final_price | money -}}
                                      </span>
                                    </div>
                                  {%- else -%}
                                    <div class="mt-1 text-[#01756E] font-medium">
                                      {{ item.original_price | money }}
                                    </div>
                                  {%- endif -%}
                                  {%- if item.product.has_only_default_variant
                                      == false
                                    or item.properties.size != 0
                                    or item.selling_plan_allocation != null
                                  -%}
                                    <dl class="mt-2 space-y-1 text-sm text-gray-600">
                                      {%- if item.product.has_only_default_variant
                                          == false
                                      -%}
                                        {%- for option in item.options_with_values -%}
                                          <div class="flex">
                                            <dt class="font-medium text-gray-700 me-1">
                                              {{ option.name }}:
                                            </dt>
                                            <dd>{{ option.value }}</dd>
                                          </div>
                                        {%- endfor -%}
                                      {%- endif -%}
                                      {%- for property in item.properties -%}
                                        {%- assign property_first_char = property.first
                                          | slice: 0
                                        -%}
                                        {%- if property.last != blank
                                          and property_first_char != '_'
                                        -%}
                                          <div class="flex">
                                            <dt class="font-medium text-gray-700 me-1">
                                              {{ property.first }}:
                                            </dt>
                                            <dd>
                                              {%- if property.last
                                                  contains '/uploads/'
                                              -%}
                                                <a
                                                  href="{{ property.last }}"
                                                  class="text-[#01A89E] hover:text-[#01756E]"
                                                  target="_blank"
                                                >
                                                  {{
                                                    property.last
                                                    | split: '/'
                                                    | last
                                                  }}
                                                </a>
                                              {%- else -%}
                                                {{ property.last }}
                                              {%- endif -%}
                                            </dd>
                                          </div>
                                        {%- endif -%}
                                      {%- endfor -%}
                                    </dl>
                                  {%- endif -%}
                                  {%- if item.selling_plan_allocation != null
                                  -%}
                                    <p class="mt-2 text-sm text-gray-600">
                                      {{ item.selling_plan_allocation.selling_plan.name }}
                                    </p>
                                  {%- endif -%}
                                  <ul class="mt-2 space-y-1">
                                    {%- for discount in item.line_level_discount_allocations -%}
                                      <li class="text-[#01A89E] flex items-center">
                                        {%- render 'icon-discount' -%}
                                        <span class="ms-1">
                                          {{- discount.discount_application.title -}}
                                        </span>
                                      </li>
                                    {%- endfor -%}
                                  </ul>
                                  <div class="mt-2 750:hidden">
                                    <quantity-popover>
                                      <div class="flex items-center">
                                        <quantity-input class="flex items-center border border-gray-200 rounded">
                                          <button
                                            class="quantity__button no-js-hidden w-10 h-10 flex items-center justify-center text-[#01756E] hover:text-[#01A89E] hover:bg-gray-100 transition-colors duration-150"
                                            name="minus"
                                            type="button"
                                          >
                                            <span class="visually-hidden">
                                              {{-
                                                'products.product.quantity.decrease'
                                                | t: product: item.product.title
                                                | escape
                                              -}}
                                            </span>
                                            {% render 'icon-minus' %}
                                          </button>
                                          <input
                                            class="w-16 h-10 text-center border-x border-gray-200"
                                            type="number"
                                            disabled
                                            name="updates[]"
                                            value="{{ item.quantity }}"
                                            min="{{ item.variant.quantity_rule.min }}"
                                            {% if item.variant.quantity_rule.max
                                                != null
                                            %}
                                              max="{{ item.variant.quantity_rule.max }}"
                                            {% endif %}
                                            step="{{ item.variant.quantity_rule.increment }}"
                                            data-index="{{ item.index | plus: 1 }}"
                                          >
                                          <button
                                            class="quantity__button no-js-hidden w-10 h-10 flex items-center justify-center text-[#01756E] hover:text-[#01A89E] hover:bg-gray-100 transition-colors duration-150"
                                            name="plus"
                                            type="button"
                                          >
                                            <span class="visually-hidden">
                                              {{-
                                                'products.product.quantity.increase'
                                                | t: product: item.product.title
                                                | escape
                                              -}}
                                            </span>
                                            {% render 'icon-plus' %}
                                          </button>
                                        </quantity-input>
                                        <a
                                          href="{{ item.url_to_remove }}"
                                          aria-label="{{ 'sections.cart.remove_title' | t: title: item.title }}"
                                          class="w-9 h-9 text-red-600 ms-2"
                                          id="Remove-{{ item.index | plus: 1 }}"
                                          data-index="{{ item.index | plus: 1 }}"
                                        >
                                          {% render 'icon-remove' %}
                                        </a>
                                      </div>
                                    </quantity-popover>
                                  </div>
                                </div>
                              </div>
                            </td>
                            <td class="py-4 !px-0 small-hide">
                              <quantity-popover>
                                <div class="flex items-center">
                                  <quantity-input class="flex items-center border border-gray-200 rounded">
                                    <button
                                      class="quantity__button no-js-hidden w-10 h-10 flex items-center justify-center text-[#01756E] hover:text-[#01A89E] hover:bg-gray-100 transition-colors duration-150"
                                      name="minus"
                                      type="button"
                                    >
                                      <span class="visually-hidden">
                                        {{-
                                          'products.product.quantity.decrease'
                                          | t: product: item.product.title
                                          | escape
                                        -}}
                                      </span>
                                      {% render 'icon-minus' %}
                                    </button>
                                    <input
                                      class="w-16 h-10 text-center border-x border-gray-200"
                                      type="number"
                                      disabled
                                      name="updates[]"
                                      value="{{ item.quantity }}"
                                      min="{{ item.variant.quantity_rule.min }}"
                                      {% if item.variant.quantity_rule.max
                                          != null
                                      %}
                                        max="{{ item.variant.quantity_rule.max }}"
                                      {% endif %}
                                      step="{{ item.variant.quantity_rule.increment }}"
                                      data-index="{{ item.index | plus: 1 }}"
                                    >
                                    <button
                                      class="quantity__button no-js-hidden w-10 h-10 flex items-center justify-center text-[#01756E] hover:text-[#01A89E] hover:bg-gray-100 transition-colors duration-150"
                                      name="plus"
                                      type="button"
                                    >
                                      <span class="visually-hidden">
                                        {{-
                                          'products.product.quantity.increase'
                                          | t: product: item.product.title
                                          | escape
                                        -}}
                                      </span>
                                      {% render 'icon-plus' %}
                                    </button>
                                  </quantity-input>
                                  <a
                                    href="{{ item.url_to_remove }}"
                                    aria-label="{{ 'sections.cart.remove_title' | t: title: item.title }}"
                                    class="w-9 h-9 text-red-600 ms-2"
                                    id="Remove-{{ item.index | plus: 1 }}"
                                    data-index="{{ item.index | plus: 1 }}"
                                  >
                                    {% render 'icon-remove' %}
                                  </a>
                                </div>
                              </quantity-popover>
                            </td>
                            <td class="py-4 px-6 text-end">
                              {%- if item.original_line_price
                                  != item.final_line_price
                              -%}
                                <div>
                                  <s class="text-gray-500">
                                    {{- item.original_line_price | money -}}
                                  </s>
                                  <div class="font-medium text-[#01756E]">
                                    {{ item.final_line_price | money }}
                                  </div>
                                </div>
                              {%- else -%}
                                <div class="font-medium text-[#01756E]">
                                  {{ item.original_line_price | money }}
                                </div>
                              {%- endif -%}
                            </td>
                          </tr>
                        {%- endif -%}
                      {%- endfor -%}
                    </tbody>
                  </table>
                </div>
              {%- endfor -%}
            </div>
          </div>
          <p
            class="visually-hidden"
            id="cart-live-region-text"
            aria-live="polite"
            role="status"
          ></p>
          <p
            class="visually-hidden"
            id="shopping-cart-line-item-status"
            aria-live="polite"
            aria-hidden="true"
            role="status"
          >
            {{ 'accessibility.loading' | t }}
          </p>
          <input
            type="hidden"
            id="cart-empty-msg"
            value="{{ 'extra_translations.cart_is_empty' | t }}"
          >
          <input
            type="hidden"
            id="sharing-msg"
            value="{{ 'extra_translations.sharing' | t }}"
          >
          <input
            type="hidden"
            id="cart-shared-link-msg"
            value="{{ 'extra_translations.cart_shared_link_copied' | t }}"
          >
          <input
            type="hidden"
            id="failed-create-shared-cart-msg"
            value="{{ 'extra_translations.failed_to_create_shared_cart' | t }}"
          >
          <input
            type="hidden"
            id="error-sharing-cart-msg"
            value="{{ 'extra_translations.error_sharing_cart' | t }}"
          >
        </form>
        {% render 'sticky-checkout', cart_total: cart.total_price | money_with_currency %}
      </div>
    {% endif %}
    <input
      type="hidden"
      id="copy-link-msg"
      value="{{ 'extra_translations.copy_link' | t }}"
    >
    <input
      type="hidden"
      id="copied-msg"
      value="{{ 'extra_translations.copied' | t }}"
    >
    <input
      type="hidden"
      id="select-and-copy-msg"
      value="{{ 'extra_translations.select_and_copy' | t }}"
    >
    <input
      type="hidden"
      id="shared-cart-link-label-msg"
      value="{{ 'extra_translations.shared_cart_link_label' | t }}"
    >
    <input
      type="hidden"
      id="cart-link-copied-msg"
      value="{{ 'extra_translations.cart_link_copied' | t }}"
    >
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      var lastCollectionUrl = localStorage.getItem('lastCollectionUrl')
      ;['continue-shopping-1', 'continue-shopping-2'].forEach(function (id) {
        var btn = document.getElementById(id)
        if (btn && lastCollectionUrl) {
          btn.setAttribute('href', lastCollectionUrl)
        }
      })
    })
  </script>

  <script>
    async function handleDeleteTypeGroup(button) {
      button.disabled = true
      const type = button.getAttribute('data-remove-type')
      const res = await fetch('/cart.js')
      const cart = await res.json()
      const updates = {}

      cart.items.forEach((item) => {
        if (
          item.product_type === type ||
          (type === '' && item.product_type === '')
        ) {
          updates[item.key] = 0
        }
      })

      if (Object.keys(updates).length > 0) {
        await fetch('/cart/update.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ updates }),
        })
        location.reload()
      }
    }
  </script>
  <script>
    function getPromoCode() {
      const promoData = JSON.parse(localStorage.getItem('promoCode'))

      if (!promoData) {
        console.log('No promo code found.')
        return null
      }

      const now = new Date().getTime() // Current time in milliseconds

      if (now > promoData.expiresAt) {
        // Promo code has expired, remove it
        localStorage.removeItem('promoCode')
        console.log('Promo code expired and has been removed.')
        return null
      }

      console.log(`Promo code retrieved: ${promoData.value}`)
      return promoData.value // Return the valid promo code
    }

    function evaluateCheckoutAvailability() {
      const storedPromoCode = getPromoCode()
      const alpineDataContainer = document.querySelector('#main-cart-footer')
      const cartFooterAlpineData = Alpine.$data(alpineDataContainer)
      const isPromoCodeEnabled = cartFooterAlpineData.isPromoCodeEnabled
      const isPromoCodeRequired = cartFooterAlpineData.isPromoCodeRequired
      cartFooterAlpineData.promoCodeContent = storedPromoCode
      let promoCodeContent = cartFooterAlpineData.promoCodeContent
      const promoCodeIsValid =
        promoCodeContent === '' || /^\d+_[a-zA-Z0-9]{8}$/.test(promoCodeContent)

      const checkpoints = document.querySelectorAll('.shipping-checkpoint')
      let allPassed = true
      checkpoints.forEach((el) => {
        const min = parseInt(el.dataset.min, 10)
        const total = parseInt(el.dataset.total, 10)
        if (total < min) {
          allPassed = false
        }
      })
      const checkoutButton = document.getElementById('checkout')
      const stickyCheckoutButton = document.getElementById(
        'sticky-checkout-button'
      )
      const warnings = document.querySelectorAll('.checkout-warning')
      if (warnings.length) {
        warnings.forEach((warning) => {
          warning.style.display = allPassed ? 'none' : 'block'
        })
      }

      const checkoutDisableStateDueToPromoCode =
        isPromoCodeEnabled && isPromoCodeRequired && !promoCodeIsValid

      const isCheckoutButtonDisabled =
        !allPassed || checkoutDisableStateDueToPromoCode

      if (checkoutButton) {
        checkoutButton.disabled = isCheckoutButtonDisabled
        checkoutButton.classList.toggle('opacity-50', isCheckoutButtonDisabled)
        checkoutButton.classList.toggle(
          'cursor-not-allowed',
          isCheckoutButtonDisabled
        )
        checkoutButton.classList.toggle(
          'pointer-events-none',
          isCheckoutButtonDisabled
        )
      }
      if (stickyCheckoutButton) {
        stickyCheckoutButton.disabled = isCheckoutButtonDisabled
        stickyCheckoutButton.classList.toggle(
          'opacity-50',
          isCheckoutButtonDisabled
        )
        stickyCheckoutButton.classList.toggle(
          'cursor-not-allowed',
          isCheckoutButtonDisabled
        )
        stickyCheckoutButton.classList.toggle(
          'pointer-events-none',
          isCheckoutButtonDisabled
        )
      }

      let cartEstimatedTotal = document.getElementById(
        'cart_estimated_total'
      ).innerText
      document.getElementById('sticky-cart-total').innerText =
        cartEstimatedTotal
    }

    document.addEventListener('DOMContentLoaded', evaluateCheckoutAvailability)
  </script>

  <script>

    const copyLinkMsg = document.getElementById('copy-link-msg').value;
    const copiedMsg = document.getElementById('copied-msg').value;
    const selectAndCopyMsg = document.getElementById('select-and-copy-msg').value;
    const sharedCartLinkLabelMsg = document.getElementById('shared-cart-link-label-msg').value;
    const cartLinkCopiedMsg = document.getElementById('cart-link-copied-msg').value;


    // Replace this with your actual method to get the current cart items as array
    async function getCartItems() {
      // Example: Fetch cart from Shopify's cart API
      const res = await fetch('/cart.js')
      const cart = await res.json()
      // Map your items to { variantId, quantity }
      return cart.items.map((item) => ({
        variantId: item.variant_id,
        quantity: item.quantity,
      }))
    }

    function showShareCartToast(link, message = sharedCartLinkLabelMsg) {
  // Remove previous if exists
  const prevToast = document.getElementById('share-cart-toast');
  if (prevToast) prevToast.remove();

  // Main toast container
  const toast = document.createElement('div');
  toast.id = 'share-cart-toast';
  toast.style.cssText = `
    position: fixed;
    top: 30px;
    left: 50%;
    transform: translateX(-50%) translateY(-24px);
    z-index: 99999;
    min-width: 240px;
    max-width: 90vw;
    width: 370px;
    background: rgba(1, 168, 158, 0.98);
    color: #fff;
    font-size: 1.19rem;
    font-weight: 500;
    box-shadow: 0 8px 32px rgba(0,0,0,0.21), 0 1.5px 12px #01a89e33;
    border-radius: 22px;
    padding: 2.5rem 1.15rem 1.3rem 1.15rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    backdrop-filter: blur(4.5px);
    animation: fadeSlideDown 0.28s cubic-bezier(.47,1.64,.41,.8);
  `;
  if (window.innerWidth < 600) {
    toast.style.width = '97vw';
    toast.style.minWidth = '120px';
    toast.style.fontSize = '1.1rem';
    toast.style.padding = '1.35rem 0.45rem 1.05rem 0.45rem';
  }

  // Animate in
  const styleTag = document.createElement('style');
  styleTag.textContent = `
    @keyframes fadeSlideDown {
      from { opacity: 0; transform: translateX(-50%) translateY(-45px); }
      to { opacity: 1; transform: translateX(-50%) translateY(-24px); }
    }
    #share-cart-toast input:focus {
      outline: 2px solid #01A89E33;
      background: #ecfffd;
    }
    #share-cart-toast button:active { transform: scale(0.97); }
  `;
  document.head.appendChild(styleTag);

  // Message
  const msg = document.createElement('div');
  msg.textContent = message;
  msg.style.cssText = `
    margin-bottom: 0.85rem;
    font-weight: 700;
    font-size: 1.5rem;
    letter-spacing: 0.04em;
    text-shadow: 0 2px 9px #00b2a855;
    width: 95%;
    text-align: center
  `;
  toast.appendChild(msg);

  // Link (input)
  const input = document.createElement('input');
  input.type = 'text';
  input.value = link;
  input.readOnly = true;
  input.style.cssText = `
    width: 100%;
    margin: 0 0 1.3rem 0;
    border-radius: 12px;
    border: none;
    font-size: 1.13rem;
    padding: 10px 15px;
    color: #14605a;
    background: #e6fcfa;
    font-weight: 600;
    text-align: center;
    letter-spacing: 0.015em;
    box-shadow: 0 2px 6px #01a89e22;
    transition: background 0.2s;
  `;
  input.onclick = function() { this.select(); };
  toast.appendChild(input);

  // Copy button (with icon)
  const copyBtn = document.createElement('button');
  copyBtn.innerHTML = `
    <span style="vertical-align:middle;display:inline-block;margin-right:0.55em;">
      <svg width="22" height="22" fill="none" stroke="#01A89E" stroke-width="2.1" viewBox="0 0 24 24">
        <rect x="8" y="8" width="10" height="12" rx="2" stroke="#01A89E" />
        <rect x="4" y="4" width="10" height="12" rx="2" />
      </svg>
    </span>
    <span style="vertical-align:middle;font-size:1.11rem;">${copyLinkMsg}</span>
  `;
  copyBtn.style.cssText = `
    margin: 0.2rem auto 0 auto;
    padding: 0.55rem 1.42rem;
    background: linear-gradient(90deg,#fff 60%,#e2f6f3 100%);
    color: #01A89E;
    border: none;
    border-radius: 13px;
    font-weight: 700;
    font-size: 1.19rem;
    box-shadow: 0 1.5px 7px rgba(1,168,158,0.07);
    cursor: pointer;
    transition: background 0.16s, color 0.16s;
    display: flex;
    align-items: center;
    gap: 0.32em;
  `;
  copyBtn.onmouseenter = () => {
    copyBtn.style.background = 'linear-gradient(90deg,#e6fcfa 0%,#fff 100%)';
    copyBtn.style.color = '#01A89E';
  };
  copyBtn.onmouseleave = () => {
    copyBtn.style.background = 'linear-gradient(90deg,#fff 60%,#e2f6f3 100%)';
    copyBtn.style.color = '#01A89E';
  };
  copyBtn.onclick = async function() {
    try {
      await navigator.clipboard.writeText(link);
      copyBtn.innerHTML = `<span style="font-weight:600;font-size:1.09rem;">${copiedMsg}</span>`;
      copyBtn.style.color = '#32b19d';
      setTimeout(() => {
        if (toast) toast.remove();
      }, 900);
    } catch {
      input.select();
      copyBtn.innerHTML = `<span style="font-weight:600;">${select_and_copy}</span>`;
      setTimeout(() => {
        if (toast) toast.remove();
      }, 1500);
    }
  };
  toast.appendChild(copyBtn);

  // Append toast to body
  document.body.appendChild(toast);
}


function showCartCopiedToast(message = cartLinkCopiedMsg ) {
  // Remove previous if exists
  const prevToast = document.getElementById('cart-copied-toast');
  if (prevToast) prevToast.remove();

  // Main toast container
  const toast = document.createElement('div');
  toast.id = 'cart-copied-toast';
  toast.style.cssText = `
    position: fixed;
    top: 32px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 99999;
    min-width: 150px;
    max-width: 85vw;
    background: #01A89E;
    color: #fff;
    font-size: 1.22rem;
    font-weight: 600;
    box-shadow: 0 8px 32px rgba(0,0,0,0.14);
    border-radius: 22px;
    padding: 1.15rem 2.2rem;
    text-align: center;
    letter-spacing: 0.02em;
    opacity: 0.96;
    animation: fadeSlideDown 0.29s cubic-bezier(.47,1.64,.41,.8);
  `;
  if (window.innerWidth < 600) {
    toast.style.fontSize = '1rem';
    toast.style.padding = '0.85rem 1.2rem';
  }

  // Animate in
  const styleTag = document.createElement('style');
  styleTag.textContent = `
    @keyframes fadeSlideDown {
      from { opacity: 0; transform: translateX(-50%) translateY(-30px);}
      to { opacity: 0.96; transform: translateX(-50%) translateY(0);}
    }
  `;
  document.head.appendChild(styleTag);

  // Message text
  toast.textContent = message;

  document.body.appendChild(toast);

  // Auto-dismiss after 1.6s
  setTimeout(() => {
    toast.remove();
  }, 1600);
}



  async function shareCart() {
    const btn = document.getElementById('share-cart-btn');
    const spinner = document.getElementById('share-cart-spinner');
    const btnText = btn.querySelector('.share-cart-text');
    const btnIcon = btn.querySelector('.share-cart-icon');

    // Translation strings from hidden inputs
    const sharingMsg = document.getElementById('sharing-msg').value;
    const cartEmptyMsg = document.getElementById('cart-empty-msg').value;
    const cartSharedLinkMsg = document.getElementById('cart-shared-link-msg').value;
    const failedCreateSharedCartMsg = document.getElementById('failed-create-shared-cart-msg').value;
    const errorSharingCartMsg = document.getElementById('error-sharing-cart-msg').value;

    btn.disabled = true;
    if (spinner) spinner.classList.remove('hidden');
    if (btnText) btnText.textContent = sharingMsg;
    if (btnIcon) btnIcon.classList.add('opacity-40');

    try {
      const items = await getCartItems();
      if (!items.length) {
        alert(cartEmptyMsg);
        return;
      }

      const customer_id = {{customer.id | default: 'null'}};
      const expires_at = null;
      const promoCode = getPromoCode();
      
      const response = await fetch('{{settings['loyalty-points-server-URL']}}/shared-carts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          customer_id,
          items,
          expires_at,
        }),
      });
      
      const data = await response.json();
      
      if (response.ok && data.data && data.data.shareable_link) {
        const shareUrl = `${window.location.origin}?shared-cart=${data.data.shareable_link}${promoCode ? `&promo-code=${promoCode}` : ""}`;
        try{
          await navigator.clipboard.writeText(shareUrl);
          showCartCopiedToast('✅ Cart link copied!'); // or customize the message
        }catch(err){
          showShareCartToast(shareUrl, cartSharedLinkMsg);
        }
      } else {
        alert(failedCreateSharedCartMsg);
      }
    } catch (err) {
      console.error(err);
      alert(errorSharingCartMsg);
    } finally  {
      btn.disabled = false;
      if (spinner) spinner.classList.add('hidden');
      if (btnText) btnText.textContent = document.getElementById('share-cart-text')?.value || '{{ "extra_translations.share_cart" | t }}';
      if (btnIcon) btnIcon.classList.remove('opacity-40');
    }
  }



    document
      .getElementById('share-cart-btn')
      .addEventListener('click', shareCart)
  </script>
</cart-items>

{% schema %}
{
  "name": "t:sections.main-cart-items.name",
  "max_blocks": 10,
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "shipping_rule",
      "name": "Shipping Rule",
      "settings": [
        {
          "type": "text",
          "id": "product_type",
          "label": "Product Type"
        },
        {
          "type": "number",
          "id": "free_shipping_limit",
          "default": 100,
          "label": "Free Shipping Limit"
        },
        {
          "type": "number",
          "id": "min_order_amount",
          "default": 0,
          "label": "Min Order Amount"
        }
      ]
    }
  ]
}
{% endschema %}
